// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum SkillType {
  OFFERED
  WANTED
}

enum SwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}

enum NotificationType {
  SWAP_UPDATE
  ADMIN_MESSAGE
}

model User {
  id             String     @id @default(uuid())
  name           String
  email          String     @unique
  passwordHash   String?
  oauthProvider  String?    // e.g., "google"
  oauthId        String?    // e.g., "123456789"
  profilePhoto   String?
  location       String?
  availability   String[]
  isPublic       Boolean    @default(true)
  role           Role       @default(USER)
  banned         Boolean    @default(false)
  createdAt      DateTime   @default(now())

  skills         Skill[]    @relation("UserSkills")
  sentSwaps      SwapRequest[] @relation("SwapSender")
  receivedSwaps  SwapRequest[] @relation("SwapReceiver")
  feedbackGiven  Feedback[] @relation("FeedbackFrom")
  feedbackReceived Feedback[] @relation("FeedbackTo")
  notifications  Notification[]
}

model Skill {
  id        String     @id @default(uuid())
  name      String
  type      SkillType
  user      User       @relation("UserSkills", fields: [userId], references: [id])
  userId    String
  createdAt DateTime   @default(now())

  offeredInSwaps SwapRequest[] @relation("OfferedSkill")
  wantedInSwaps  SwapRequest[] @relation("WantedSkill")
}

model SwapRequest {
  id              String     @id @default(uuid())
  fromUser        User       @relation("SwapSender", fields: [fromUserId], references: [id])
  fromUserId      String
  toUser          User       @relation("SwapReceiver", fields: [toUserId], references: [id])
  toUserId        String
  offeredSkill    Skill      @relation("OfferedSkill", fields: [offeredSkillId], references: [id])
  offeredSkillId  String
  wantedSkill     Skill      @relation("WantedSkill", fields: [wantedSkillId], references: [id])
  wantedSkillId   String
  status          SwapStatus @default(PENDING)
  message         String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  feedbacks       Feedback[]
}

model Feedback {
  id            String   @id @default(uuid())
  swapRequest   SwapRequest @relation(fields: [swapRequestId], references: [id])
  swapRequestId String

  fromUser      User     @relation("FeedbackFrom", fields: [fromUserId], references: [id])
  fromUserId    String

  toUser        User     @relation("FeedbackTo", fields: [toUserId], references: [id])
  toUserId      String

  rating        Int
  comment       String?
  createdAt     DateTime @default(now())
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
}

model AdminMessage {
  id        String   @id @default(uuid())
  title     String
  body      String
  visible   Boolean  @default(true)
  createdAt DateTime @default(now())
}
